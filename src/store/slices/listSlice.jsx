import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import fetchAPI from "../../api/omdbAPI";

const initialState = {
  search: "",
  value: [],
  page: 0,
  total: 0,
  message: "",
  loading: false,
};

export const fetchMovies = createAsyncThunk(
  "list/fetchMovies",
  async (payload) => {
    const response = await fetchAPI.get("/", {
      params: {
        s: payload.search,
        page: payload.page,
      },
    });

    return response.data;
  }
);

export const listSlice = createSlice({
  name: "list",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    changeSearch: (state, action) => {
      state.search = action.payload;
      state.value = [];
      state.page = 0;
      state.total = 0;
      state.message = "";
      state.loading = false;
    },
    changePage: (state) => {
      state.page = state.page + 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [fetchMovies.pending]: (state) => {
      state.loading = true;
      state.message = "";
    },
    [fetchMovies.fulfilled]: (state, action) => {
      if (action.payload.Response === "True") {
        state.value = [...state.value, ...action.payload.Search];
        state.total = action.payload.totalResults;
        state.loading = false;
      } else if (action.payload.Error === "Movie not found!") {
        state.loading = false;
        state.message = "Max page";
      } else {
        state.value = [];
        state.total = 0;
        state.loading = false;
        state.message = action.payload.Error;
      }
    },
    [fetchMovies.rejected]: (state, action) => {
      state.message = action.payload;
      state.loading = false;
    },
  },
});

export const { changeSearch, changePage } = listSlice.actions;

export const selectSearch = (state) => state.list.search;
export const selectList = (state) => state.list.value;
export const selectPage = (state) => state.list.page;
export const selectMessage = (state) => state.list.message;
export const selectLoading = (state) => state.list.loading;

export const fetchMore = () => async (dispatch, getState) => {
  await dispatch(changePage())

  const search = selectSearch(getState());
  const page = await selectPage(getState());
  
  dispatch(fetchMovies({search, page}));
};

export default listSlice.reducer;

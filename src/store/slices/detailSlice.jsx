import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import fetchAPI from "../../api/omdbAPI";

const initialState = {
  value: {},
  message: "",
  loading: false,
};

export const fetchDetail = createAsyncThunk(
  "detail/fetchDetail",
  async (id) => {
    const response = await fetchAPI.get("/", {
      params: {
        i: id,
        plot: "full",
      },
    });

    console.log(response);

    return response.data;
  }
);

export const detailSlice = createSlice({
  name: "detail",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [fetchDetail.pending]: (state) => {
      state.loading = true;
      state.message = "";
    },
    [fetchDetail.fulfilled]: (state, action) => {
      if (action.payload.Response === "True") {
        state.value = action.payload;
        state.loading = false;
        state.message = "";
      } else if (action.payload.Error === "Movie not found!") {
        state.loading = false;
        state.message = "404 Not Found";
      } else {
        state.value = {};
        state.loading = false;
        state.message = action.payload.Error;
      }
    },
    [fetchDetail.rejected]: (state, action) => {
      state.message = action.payload;
      state.loading = false;
    },
  },
});

export const selectDetail = (state) => state.detail.value;
export const selectMessage = (state) => state.detail.message;
export const selectLoading = (state) => state.detail.loading;

export default detailSlice.reducer;